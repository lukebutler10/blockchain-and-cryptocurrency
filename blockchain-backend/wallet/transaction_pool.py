

class TransactionPool():
	def __init__(self):
		self.transaction_map = {} #this is gonna be a dict where the transaction id's are the keeys and the transaction objects are the values


	def  set_transaction(self, transaction):
		"""
		Set a transaction in a transaction pool
		"""
		self.transaction_map[transaction.id] = transaction 


#We'll use the method below to update a transaction by the sender if it alreasdy exists in the transaction pool
	def existing_transaction(self, address):
		"""
		Find a transaction generated by the address in the transaction pool
		"""
		for transaction in self.transaction_map.values():
			if transaction.input['address'] == address:
				return transaction #if the address parameter inputted to this method by user is not in transaction_map.values, we'll see None returned here


	def transaction_data(self):
		"""
		Return the transactions of the transaction pool represented in their json serialized form
		"""
		return list(map(
	  		lambda transaction:transaction.to_json(),
	  		self.transaction_map.values()
	  	))


	def clear_blockchain_transactions(self, blockchain):
		'''
		Delete blockchain recorded transactions from the transaction pool
		'''
		for block in blockchain.chain:
			for transaction in block.data:
				try:
					del self.transaction_map[transaction['id']]
				except KeyError:
					pass

	  	 